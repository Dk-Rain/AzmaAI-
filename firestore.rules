rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Global helper function to check if the requesting user is an admin.
    // This can be used in any rule.
    function isGlobalAdmin() {
      // Check the 'role' field in the user's own document.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Local helper function, only for use within the /users/{userId} match.
      function isRequestingUserAdmin() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }

      // Any authenticated user can read their own data.
      // Admins can read any user's data.
      allow read: if request.auth.uid == userId || isRequestingUserAdmin();

      // A user can create their own user document upon signup.
      // Admins can create new user documents.
      allow create: if request.auth.uid == userId || isRequestingUserAdmin();

      // A user can update their own data.
      // Admins can update any user's data.
      allow update: if request.auth.uid == userId || isRequestingUserAdmin();

      // Only admins can delete user accounts from the database.
      allow delete: if isRequestingUserAdmin();
      
      // Allow users to create their own export history records
      match /exports/{docId} {
        allow create: if request.auth.uid == userId;
        allow read: if request.auth.uid == userId || isRequestingUserAdmin();
      }
    }
    
    // Rules for the 'workspaces' collection
    match /workspaces/{userId} {
        // A user can read and write to their own workspace.
        // Admins can read and write to any user's workspace.
        allow read, write: if request.auth.uid == userId || isGlobalAdmin();
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
        // Authenticated users can create their own transactions (e.g., when subscribing).
        allow create: if request.auth != null;
        
        // Only admins can read, update, or delete transaction records.
        allow read, update, delete: if isGlobalAdmin();
    }
    
    // Rules for the 'announcements' collection
    match /announcements/{announcementId} {
        // Anyone can read announcements.
        allow read: if true;
        
        // Only admins can create, update, or delete announcements.
        allow write: if isGlobalAdmin();
    }

    // Rules for the 'promoCodes' collection
    match /promoCodes/{promoId} {
        // Authenticated users can read promo codes to verify them.
        allow read: if request.auth != null;
        
        // Admins can create and delete.
        allow create, delete: if isGlobalAdmin();
        
        // Admins can update any field. Authenticated users can only update specific fields to redeem a code.
        allow update: if request.auth != null && (isGlobalAdmin() || 
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usedCount', 'redeemedBy'])));
    }
    
    // Rules for the 'settings' collection
    match /settings/{settingId} {
        // Allow anyone to read the settings document.
        allow read: if true;
        // Only admins can write to the settings document.
        allow write: if isGlobalAdmin();
    }

    // Rules for the 'exports' collection used for public document verification
    match /exports/{docId} {
        // Anyone can read document history to verify a document's authenticity.
        allow read: if true;
        
        // Any authenticated user can create an export record.
        allow create: if request.auth != null;
    }
  }
}
