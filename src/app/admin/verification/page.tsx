
'use client';

import { useState, useEffect } from 'react';
import type { DocumentHistoryEntry } from '@/types/admin';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { BadgeCheck, Search, XCircle, CheckCircle, FileClock } from 'lucide-react';

export default function VerificationPage() {
  const [docId, setDocId] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [verificationResult, setVerificationResult] = useState<DocumentHistoryEntry | null | 'not_found'>(null);
  const { toast } = useToast();
  const [history, setHistory] = useState<DocumentHistoryEntry[]>([]);

  useEffect(() => {
    // Load history from localStorage on component mount
    try {
      const storedHistory = localStorage.getItem('azma_document_history');
      if (storedHistory) {
        setHistory(JSON.parse(storedHistory));
      }
    } catch (error) {
      console.error('Failed to load document history from localStorage', error);
    }
  }, []);

  const handleVerify = (e: React.FormEvent) => {
    e.preventDefault();
    if (!docId) {
      toast({ variant: 'destructive', title: 'Document ID required' });
      return;
    }

    setIsLoading(true);
    setVerificationResult(null);

    // Simulate API call to check for the document
    setTimeout(() => {
      const foundDocument = history.find(entry => entry.docId === docId);

      if (foundDocument) {
        setVerificationResult(foundDocument);
      } else {
        setVerificationResult('not_found');
      }
      
      setIsLoading(false);
    }, 500);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><BadgeCheck /> Document Verification</CardTitle>
        <CardDescription>
          Enter a Document ID from a generated file to verify its authenticity.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleVerify} className="flex items-center gap-2">
          <Input
            value={docId}
            onChange={(e) => setDocId(e.target.value)}
            placeholder="e.g., AZMA-DOC-1757684388470-theimpact"
            className="flex-1"
          />
          <Button type="submit" disabled={isLoading}>
            {isLoading ? 'Verifying...' : 'Verify'} <Search className="ml-2 h-4 w-4" />
          </Button>
        </form>

        <div className="mt-6">
          {verificationResult === 'not_found' && (
            <Card className="border-destructive bg-destructive/10">
                <CardContent className="p-6 flex items-center gap-4">
                    <XCircle className="h-10 w-10 text-destructive"/>
                    <div>
                        <h3 className="font-bold text-destructive">Verification Failed</h3>
                        <p className="text-sm text-destructive/80">
                            No document with the ID "{docId}" was found in the system history.
                        </p>
                    </div>
                </CardContent>
            </Card>
          )}

          {verificationResult && verificationResult !== 'not_found' && (
            <Card className="border-green-500 bg-green-500/10">
                <CardContent className="p-6 flex items-center gap-4">
                    <CheckCircle className="h-10 w-10 text-green-600"/>
                    <div>
                        <h3 className="font-bold text-green-700 dark:text-green-500">Document Verified</h3>
                        <p className="text-sm text-green-600 dark:text-green-400">
                            This document is authentic and was generated by AzmaAI.
                        </p>
                        <div className="text-xs text-muted-foreground mt-2 space-y-1">
                          <p><strong>Title:</strong> {verificationResult.title}</p>
                          <p><strong>Generated At:</strong> {new Date(verificationResult.generatedAt).toLocaleString()}</p>
                        </div>
                    </div>
                </CardContent>
            </Card>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
